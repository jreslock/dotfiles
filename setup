#!/usr/bin/env bash

# This script sets up the environment in a new development container.
# It installs Antidote, zsh, less, unzip, the GitHub CLI (gh), AWS CLI v2,
# AWS Session Manager Plugin, and Git Credential Manager.

# Exit on any error
set -e

# Detect OS
OS=$(uname -s | tr '[:upper:]' '[:lower:]')

# Detect if the system is Alpine Linux
if [ -f /etc/alpine-release ]; then
    OS="alpine"
fi

echo "Detected OS: $OS"

# Install Antidote
echo "Installing Antidote..."
if [ ! -d "${HOME}/.antidote" ]; then
  git clone --depth=1 https://github.com/mattmc3/antidote.git "${HOME}/.antidote"
  echo "Antidote installed successfully"
else
    echo "Antidote already installed, updating..."
    cd "${HOME}/.antidote" && git pull --quiet && cd - > /dev/null
fi

# Install zsh
if ! command -v zsh &> /dev/null; then
    echo "Installing zsh..."
    if [ "$OS" = "darwin" ]; then
        brew install zsh
    elif [ "$OS" = "alpine" ]; then
        apk add --no-cache zsh
    else
        apt update -yqq
        apt install -yqq zsh
    fi
else
    echo "zsh already installed"
fi

# Ensure less is installed for the git pager
if ! command -v less &> /dev/null; then
    echo "Installing less..."
    if [ "$OS" = "darwin" ]; then
        brew install less
    elif [ "$OS" = "alpine" ]; then
        apk add --no-cache less
    else
        apt update -yqq
        apt install -yqq less
    fi
else
    echo "less already installed"
fi

# Ensure unzip is installed
if ! command -v unzip &> /dev/null; then
    echo "Installing unzip..."
    if [ "$OS" = "darwin" ]; then
        brew install unzip
    elif [ "$OS" = "alpine" ]; then
        apk add --no-cache unzip
    else
        apt update -yqq
        apt install -yqq unzip
    fi
else
    echo "unzip already installed"
fi

# Install the github CLI (gh)
if ! command -v gh &> /dev/null; then
    echo "Installing github CLI (gh)..."
    if [ "$OS" = "darwin" ]; then
        brew install gh
    elif [ "$OS" = "alpine" ]; then
        apk add --no-cache github-cli
    else
        apt update -yqq
        apt install -yqq gh
    fi
else
    echo "github CLI (gh) is already installed"
fi

# Install AWS CLI v2
if ! command -v aws &> /dev/null; then
    echo "Installing AWS CLI v2..."
    if [ "$OS" = "darwin" ]; then
        # macOS installation
        wget "https://awscli.amazonaws.com/AWSCLIV2.pkg" -P "/tmp"
        installer -pkg /tmp/AWSCLIV2.pkg -target /
        rm /tmp/AWSCLIV2.pkg
    elif [ "$OS" = "alpine" ]; then
        if ! command -v aws &> /dev/null; then
            echo "Installing AWS CLI using apk..."
            apk add --no-cache aws-cli
        else
            echo "AWS CLI is already installed"
        fi
    else
        ARCH=$(uname -m)
        if [ "$ARCH" = "x86_64" ] || [ "$ARCH" = "amd64" ]; then
            target="x86_64" # Map amd64 to x86_64 for compatibility
        elif [ "$ARCH" = "arm64" ] || [ "$ARCH" = "aarch64" ]; then
            target="aarch64"
        else
            echo "Unsupported architecture: ${ARCH}"
            exit 1
        fi
        wget "https://awscli.amazonaws.com/awscli-exe-linux-${target}.zip" -O "/tmp/awscliv2.zip"
        unzip -qq /tmp/awscliv2.zip -d /tmp
        /tmp/aws/install
        rm -rf /tmp/aws /tmp/awscliv2.zip
    fi
else
    echo "AWS CLI v2 is already installed"
fi

# Install the AWS Session Manager Plugin
if ! command -v session-manager-plugin &> /dev/null; then
    echo "Installing AWS Session Manager Plugin..."
    if [ "$OS" = "darwin" ]; then
        brew install session-manager-plugin
    elif [ "$OS" = "alpine" ]; then
        apk add --no-cache aws-session-manager-plugin
    else
        ARCH=$(uname -m)
        if [ "$ARCH" = "x86_64" ] || [ "$ARCH" = "amd64" ]; then
            target="64bit"
        elif [ "$ARCH" = "arm64" ] || [ "$ARCH" = "aarch64" ]; then
            target="arm64"
        else
            echo "Unsupported architecture: ${ARCH}"
            exit 1
        fi

        SESSION_MANAGER_URL="https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_${target}/session-manager-plugin.deb"
        wget -qq "$SESSION_MANAGER_URL" -P "/tmp"
        dpkg -i /tmp/session-manager-plugin.deb
        rm /tmp/session-manager-plugin.deb
    fi
else
    echo "AWS Session Manager Plugin is already installed"
fi

# Install Docker ECR Credential Helper
if ! command -v docker-credential-ecr-login &> /dev/null; then
    echo "Installing Docker ECR Credential Helper..."
    if [ "$OS" = "darwin" ]; then
        # macOS installation
        brew install docker-credential-helper-ecr
    else
        if [ "$OS" = "alpine" ]; then
            # Alpine Linux installation
            apk add --no-cache docker-credential-ecr-login
        else
        # Ubuntu/Debian installation
        apt update -yqq
        apt install -yqq amazon-ecr-credential-helper
        fi
    fi
else
    echo "Docker ECR Credential Helper is already installed"
fi

# Copy dotfiles to home directory
echo "Copying dotfiles to home directory..."

# Create backup of existing files if they exist
if [ -f "$HOME/.zshrc" ]; then
    mv "$HOME/.zshrc" "$HOME/.zshrc.backup"
    echo "Backed up existing .zshrc"
fi

if [ -f "$HOME/.zsh_plugins.txt" ]; then
    mv "$HOME/.zsh_plugins.txt" "$HOME/.zsh_plugins.txt.backup" 
    echo "Backed up existing .zsh_plugins.txt"
fi

if [ -f "$HOME/.p10k.zsh" ]; then
    mv "$HOME/.p10k.zsh" "$HOME/.p10k.zsh.backup"
    echo "Backed up existing .p10k.zsh"
fi

# Copy new files
echo "Copying zsh configuration files..."
cp "./zsh/.zshrc" "$HOME/"
cp "./zsh/.zsh_plugins.txt" "$HOME/"
cp "./zsh/.p10k.zsh" "$HOME/"
cp "./tmux/.tmux.conf" "$HOME/"

# Copy code/cursor commands
echo "Installing code and cursor commands..."
if [ "$OS" = "darwin" ]; then
    sudo cp "./zsh/cmd/code" "/usr/local/bin/code"
    sudo cp "./zsh/cmd/code" "/usr/local/bin/cursor"
    sudo chmod +x "/usr/local/bin/code" "/usr/local/bin/cursor"
else
    cp "./zsh/cmd/code" "/usr/local/bin/code"
    cp "./zsh/cmd/code" "/usr/local/bin/cursor"
    chmod +x "/usr/local/bin/code" "/usr/local/bin/cursor"
fi

# Copy docker config for non-macOS systems
if [ "$OS" != "darwin" ]; then
    mkdir -p "$HOME/.docker"
    cp "$HOME/dotfiles/docker/config.json" "$HOME/.docker/"
    echo "Copied .docker/config.json"
fi

echo "Dotfiles installation completed successfully!"
echo "Please restart your shell or run 'source ~/.zshrc' to apply changes."
