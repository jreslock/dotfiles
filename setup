#!/usr/bin/env bash

# Install Antidote
if [ ! -d "${HOME}/.antidote" ]; then
  git clone --depth=1 https://github.com/mattmc3/antidote.git "${HOME}/.antidote"
else
    echo "Antidote already installed"
fi

# Detect OS and architecture
OS=$(uname -s | tr '[:upper:]' '[:lower:]')
ARCH=$(uname -m)

# Ensure unzip is installed
if ! command -v unzip &> /dev/null; then
    echo "Installing unzip..."
    if [ "$OS" = "darwin" ]; then
        brew install unzip
    else
        apt-get update -yqq
        apt-get install -y unzip
    fi
fi

# Install AWS CLI v2
if ! command -v aws &> /dev/null; then
    echo "Installing AWS CLI v2..."
    if [ "$OS" = "darwin" ]; then
        # macOS installation
        curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
        installer -pkg AWSCLIV2.pkg -target /
        rm AWSCLIV2.pkg
    else
        # Linux installation
        if [ "$ARCH" = "arm64" ]; then
            target="aarch64"
        elif [ "$ARCH" = "x86_64" ]; then
            target="x86_64"
        else
            echo "Unsupported architecture: ${ARCH}"
            exit 1
        fi
        curl "https://awscli.amazonaws.com/awscli-exe-linux-${target}.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        ./aws/install
        rm -rf aws awscliv2.zip
    fi
else
    echo "AWS CLI v2 is already installed"
fi

# Install the AWS Session Manager Plugin
if ! command -v session-manager-plugin &> /dev/null; then
    echo "Installing AWS Session Manager Plugin..."
    if [ "$OS" = "darwin" ]; then
        brew install session-manager-plugin
    else
        # Construct the appropriate URL based on architecture
        # Linux installation
        if [ "$ARCH" = "arm64" ]; then
            target="arm64"
        elif [ "$ARCH" = "x86_64" ]; then
            target="64bit"
        else
            echo "Unsupported architecture: ${ARCH}"
            exit 1
        fi
        SESSION_MANAGER_URL="https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_${target}/session-manager-plugin.deb"
        curl "$SESSION_MANAGER_URL" -o "session-manager-plugin.deb"
        dpkg -i session-manager-plugin.deb
        rm session-manager-plugin.deb
    fi
else
    echo "AWS Session Manager Plugin is already installed"
fi

# Install Git Credential Manager
if ! command -v git-credential-manager &> /dev/null; then
    echo "Installing Git Credential Manager..."
    if [ "$OS" = "darwin" ]; then
        # macOS installation
        brew install --cask git-credential-manager
    else
        # Linux installation
        if [ "$ARCH" = "arm64" ]; then
            target="arm64"
        elif [ "$ARCH" = "x86_64" ]; then
            target="amd64"
        else
            echo "Unsupported architecture: ${ARCH}"
            exit 1
        fi
        curl "https://github.com/git-ecosystem/git-credential-manager/releases/download/v2.6.1/gcm-linux_${target}.2.6.1.tar.gz" -o "${HOME}/gcm-linux_${target}.2.6.1.tar.gz"
        tar -xvf "${HOME}/gcm-linux_${target}.2.6.1.tar.gz" -C "/usr/local/bin"
        git config credential.helper 'cache --timeout=3600'
        rm "${HOME}/gcm-linux_${target}.2.6.1.tar.gz"
    fi
else
    echo "Git Credential Manager is already installed"
fi

# Install Docker ECR Credential Helper
if ! command -v docker-credential-ecr-login &> /dev/null; then
    echo "Installing Docker ECR Credential Helper..."
    if [ "$OS" = "darwin" ]; then
        # macOS installation
        brew install docker-credential-helper-ecr
    else
        # Linux installation
        apt-get update -yqq
        apt-get install -y amazon-ecr-credential-helper
    fi
else
    echo "Docker ECR Credential Helper is already installed"
fi

# Copy dotfiles to home directory
echo "Copying dotfiles to home directory..."

# Create backup of existing files if they exist
if [ -f "$HOME/.zshrc" ]; then
    mv "$HOME/.zshrc" "$HOME/.zshrc.backup"
    echo "Backed up existing .zshrc"
fi

if [ -f "$HOME/.zsh_plugins.txt" ]; then
    mv "$HOME/.zsh_plugins.txt" "$HOME/.zsh_plugins.txt.backup" 
    echo "Backed up existing .zsh_plugins.txt"
fi

# Copy new files
cp "$HOME/dotfiles/.zshrc" "$HOME/.zshrc"
cp "$HOME/dotfiles/.zsh_plugins.txt" "$HOME/.zsh_plugins.txt"
echo "Copied .zshrc and .zsh_plugins.txt to $HOME directory"
